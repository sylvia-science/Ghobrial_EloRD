# merge the samples
# select highly variable genes
# run PCA and then
library(Matrix)
library(readxl)
library(Seurat)
library(readxl)
library(harmony)
library(ggplot2)
library(SoupX)
library(scater)
library(dplyr)
library(scran)
library(reshape2)
library(stringr)
library(UpSetR)
library(edgeR)
library(SingleCellExperiment)
library(tibble)
source('/home/sujwary/Desktop/scRNA/Code/Functions.R')
source('/home/sujwary/Desktop/scRNA/Code/LoadCellData.R')
source('/home/sujwary/Desktop/scRNA/Code/Integration/PlotAll.R')
source('/home/sujwary/Desktop/scRNA/Code/Integration/FunctionsIntegrate.R')
source('/home/sujwary/Desktop/scRNA/Code/Plot_func.R')
source('/home/sujwary/Desktop/scRNA/Code/Integrate All/Entropy.R')
source('/home/sujwary/Desktop/scRNA/Code/Visualization/PlotCellPhoneDB.R')
source('~/Desktop/scRNA/Code/Integrate All/LoadHarmonySubset.R')
filename_sampleParam = paste0('/home/sujwary/Desktop/scRNA/Param/','sample_parameters_Scran.xlsx')
sampleParam <- read_excel(filename_sampleParam)
filename = paste0('/home/sujwary/Desktop/scRNA/Param/','Cluster_ID_testNorm.xlsx')
cluster_id_param = read_excel(filename)
filename_metaData = '/home/sujwary/Desktop/scRNA/Data/EloRD Meta.xlsx'
#filename_metaData = '/disk2/Projects/EloRD_Nivo_PBMC/MetaData/metaData_EloRD_Nivo_PBMC.xlsx'
metaData_old = read_excel(filename_metaData)
metaData_old = metaData_old[metaData_old$Run== 1,]
# Individual sample parameters
sampleParam = sampleParam[sampleParam$Sample %in% metaData$Sample,]
# Parameters for integrated data
filename_sampleParam_combine <- paste0('/home/sujwary/Desktop/scRNA/Data/sample_','Combine','_parameters.xlsx')
sampleParam_combine <- read_excel(filename_sampleParam_combine)
# Original ELoRD data with no PBMCs
sample_type = 'Harmony_AllSamples_Sample_Kit'
folder_name = 'AllSamples'
harmony_groupby = 'Sample_Kit'
base = '/home/sujwary/Desktop/scRNA/Output/Harmony/'
# EloRD data including our PBMCs and PBMCs for HCA
# sample_type = 'Harmony_AllSamples_PBMC_Sample_Kit'
# folder_name = 'AllSamples_PBMC'
# harmony_groupby = 'Sample_Kit'
# base = '/disk2/Projects/EloRD/Output/Harmony/'
# #
# EloRD data + our PBMCs + PBMCs for HCA
# sample_type = 'Harmony_AllSamples_PBMC_NPBMC_Sample_Kit'
# folder_name = 'AllSamples_PBMC'
# harmony_groupby = 'Sample_Kit'
# base = '/disk2/Projects/EloRD/Output/Harmony/'
#EloRD data + our PBMCs + PBMCs for HCA + PBMCS/BMs from HCL
# sample_type = 'AllSamples_PBMC_NPBMC_HCL_Sample_kit_tech'
# folder_name = 'AllSamples_PBMC_NPBMC_HCL'
# harmony_groupby = 'Sample_kit_tech'
# base = '/disk2/Projects/EloRD/Output/Harmony/'
# soup_base = '/disk2/Projects/EloRD/Output/Soup_MT_C100/'
#EloRD data + Nivo + Oksana data
# folder_name = 'EloRD_Nivo_Oksana'
# harmony_groupby = 'Sample_kit'
# sample_type = 'EloRD_Nivo_Oksana_Sample_kit'
# base = '/disk2/Projects/EloRD_Nivo_Oksana/Harmony/'
# filename_metaData = '/disk2/Projects/EloRD_Nivo_Oksana/MetaData/10X Sequenced Samples.xlsx'
# soup_base = '/disk2/Projects/EloRD_Nivo_Oksana/Output/Soup_MT_C100/'
# Load metadata
metaData = read_excel(filename_metaData)
metaData = metaData[metaData$Run== 1,]
metaData = metaData[rowSums(is.na(metaData)) != ncol(metaData), ]
metaData = metaData[metaData$Sample !='BatchF',] # BatchF is crashing at quickCluster in scran norm
# Combine new metadata with old metadata
metaData$Sample[!(metaData$Sample %in% metaData_old$Sample)]
metaData_old$Sample[!(metaData_old$Sample %in% metaData$Sample)]
tmp = metaData_old[!(metaData_old$Sample %in% metaData$Sample),]
metaData_new = merge(metaData,metaData_old, by = 'Sample', all.x = TRUE,sort = FALSE)
metaData = metaData_new[match( metaData$Sample,metaData_new$Sample),]
names(metaData) = gsub(".x","",names(metaData),fixed = TRUE)
# Get params
PCA_dim = sampleParam_combine$PCA_dim[sampleParam_combine['Sample'] == sample_type]
resolution_val = sampleParam_combine$resolution_val[sampleParam_combine['Sample'] == sample_type]
cluster_IDs = sampleParam_combine$Cluster_IDs[sampleParam_combine['Sample'] == sample_type]
folder = paste0(base,
'/Batch_',harmony_groupby,'/')
dir.create(folder,recursive = T)
run = F
sample_list = metaData$Sample
sample_list[!(sample_list %in% unique(data_harmony_run$sample))]
# For running individual sample
i = 1
sample_name = 'pM5574CD45P'
#######################
# Load processed data
#######################
#resolution_val = 3
filepath_cluster = paste0( folder, 'Cluster/', 'PCA',PCA_dim,'/res',resolution_val,'/' )
# Load data and
path = paste0(folder,'data_run','.Robj')
data_harmony_run = loadRData(path)
tmp = data_harmony_run@meta.data[paste0('RNA_snn_res.', resolution_val)]
tmp = tmp[,1]
tmp  =factor(tmp,levels = as.character(0:(length(unique(tmp))-1)))
Idents(data_harmony_run) = tmp
data_harmony_run$orig.ident = Idents(data_harmony_run)
# Reload vars in case they have changed
cell_names_all = sub("_.*", "", colnames(data_harmony_run))
data_harmony_run$cell_sample = paste0(cell_names_all,' ',data_harmony_run$sample )
data_harmony_run$sample_cell = paste0(data_harmony_run$sample,' ',cell_names_all )
data_harmony_run = load_Doublets(data_harmony_run)
data_harmony_run$FeatureLessThan400 = data_harmony_run$nFeature_RNA < 400
data_harmony_run = addMetaData(data_harmony_run, metaData)
data_harmony_run$kit = data_harmony_run$`10X kit`
path = '/home/sujwary/Desktop/scRNA/Output/Harmony/Batch_Sample_Kit/Cluster/PCA30/res3//Data/Labels.csv'
data_harmony_run = addOldLabels(path,data_harmony_run, 'OldCellType')
data_harmony_run_label = label_cells(data_harmony_run,cluster_IDs)
if (sample_type == 'Harmony_AllSamples_Sample_Kit'){
data_harmony_run$sample_cell = paste0(data_harmony_run$Sample,'_', colnames(data_harmony_run))
TSCM_res4 = read.csv(paste0('/home/sujwary/Desktop/scRNA/Output/Harmony/Batch_Sample_Kit/Subcluster/T Cell/Cluster/PCA30/res3.5/'
,'Data/','TSCM_res4','.csv'))
new_Idents = as.character(Idents(data_harmony_run_label))
new_Idents[colnames(data_harmony_run_label) %in% TSCM_res4$x] = 'TSCM'
Idents(data_harmony_run_label) = new_Idents
}
#table(data_harmony_run$sample)
#table(data_harmony_run$Treatment)
filepath_cluster = paste0( folder, 'Cluster/', 'PCA',PCA_dim,'/res',resolution_val,'/' )
data_input = data_harmony_run_label
data_input = data_input[,!(Idents(data_input) %in%
c('Erythrocyte',1:50,'Remove'))]
Idents(data_input) = as.character(Idents(data_input))
#
data_input = data_harmony_run_label
data_matrix = data_input@assays[["RNA"]]@data
data_matrix_var = data_matrix[rownames(data_matrix) %in% data_input@assays[["RNA"]]@var.features,]
path = paste0(filepath_cluster,'Data/matrix_',
celltype,'.tsv')
write.table(data_matrix,
file=path,
quote=FALSE, sep='\t')
celltype = '_all'
data_matrix_var = data_matrix[rownames(data_matrix) %in% data_input@assays[["RNA"]]@var.features,]
path = paste0(filepath_cluster,'Data/matrix_',
celltype,'.tsv')
write.table(data_matrix,
file=path,
quote=FALSE, sep='\t')
path = paste0(filepath_cluster,'Data/matrix_',
celltype,'_varFeature','.tsv')
write.table(data_matrix_var,
file=path,
quote=FALSE, sep='\t')
data_input = data_harmony_run_label
gene_list = read.csv('/home/sujwary/Desktop/scRNA/Data/GSEA/KEGG_TGF_BETA_SIGNALING_PATHWAY.txt',header = F)
gene_list = gene_list$V1
gene_list = as.character(gene_list[gene_list %in% rownames(data_input)])
gene_list
gene_list = list(c(gene_list))
data_input = AddModuleScore(data_input,gene_list, name = 'TGF_BETA')
val = cbind(as.character(Idents(data_input)),as.numeric(data_input$TGF_BETA1))
val = as.data.frame(val)
val
colnames(val) = c('label','TGF_BETA')
val$TGF_BETA = as.numeric(as.character(val$TGF_BETA))
val$cell = colnames(data_input)
val$sample = data_input$sample
val
aggregate(val$TGF_BETA, list(val$label), mean)
print(FeaturePlot(data_input,pt.size = 0.7, features = c("TGF_BETA")))
FontSize = 12
print(FeaturePlot(data_input,pt.size = 0.7, features = c("TGF_BETA1")))
FontSize = 12
pathName =  paste0(filepath_cluster,'Plots/BoxPlot/','BoxPlot_TGF_BETA1','.png')
png(file=pathName,width=2400, height=600)
plot = ggplot(val, aes(x = label, y = TGF_BETA1 ,fill=label)) +
geom_boxplot()+
coord_cartesian(ylim = c(0, 0.6))+
xlab("Cell Type") + ylab(paste0('Interferon Score'))+
theme_classic()
plot = plot + theme(
#plot.title = element_text(hjust = 0.5,color="black", size=24, face="bold.italic"),
axis.title.x = element_text(color="black", size=FontSize ),
axis.title.y = element_text(color="black", size=FontSize),
axis.text= element_text(color="black", size=FontSize),
)
plot = plot + theme(plot.title = element_text(hjust = 0.5))
print(plot)
dev.off()
pathName =  paste0(filepath_cluster,'Plots/BoxPlot/','BoxPlot_TGF_BETA1','.png')
png(file=pathName,width=2400, height=600)
plot = ggplot(val, aes(x = label, y = TGF_BETA1 ,fill=label)) +
geom_boxplot()+
coord_cartesian(ylim = c(0, 0.6))+
xlab("Cell Type") + ylab(paste0('Interferon Score'))+
theme_classic()
plot = plot + theme(
#plot.title = element_text(hjust = 0.5,color="black", size=24, face="bold.italic"),
axis.title.x = element_text(color="black", size=FontSize ),
axis.title.y = element_text(color="black", size=FontSize),
axis.text= element_text(color="black", size=FontSize),
)
plot = plot + theme(plot.title = element_text(hjust = 0.5))
print(plot)
dev.off()
pathName =  paste0(filepath_cluster,'Plots/BoxPlot/','BoxPlot_TGF_BETA1','.png')
png(file=pathName,width=2400, height=600)
plot = ggplot(val, aes(x = label, y = TGF_BETA1 ,fill=label)) +
geom_boxplot()+
coord_cartesian(ylim = c(0, 0.6))+
xlab("Cell Type") + ylab(paste0('Interferon Score'))+
theme_classic()
plot = plot + theme(
#plot.title = element_text(hjust = 0.5,color="black", size=24, face="bold.italic"),
axis.title.x = element_text(color="black", size=FontSize ),
axis.title.y = element_text(color="black", size=FontSize),
axis.text= element_text(color="black", size=FontSize),
)
plot = plot + theme(plot.title = element_text(hjust = 0.5))
print(plot)
dev.off()
pathName =  paste0(filepath_cluster,'Plots/BoxPlot/','BoxPlot_TGF_BETA1','.png')
png(file=pathName,width=2400, height=600)
plot = ggplot(val, aes(x = label, y = TGF_BETA ,fill=label)) +
geom_boxplot()+
coord_cartesian(ylim = c(0, 0.6))+
xlab("Cell Type") + ylab(paste0('Interferon Score'))+
theme_classic()
plot = plot + theme(
#plot.title = element_text(hjust = 0.5,color="black", size=24, face="bold.italic"),
axis.title.x = element_text(color="black", size=FontSize ),
axis.title.y = element_text(color="black", size=FontSize),
axis.text= element_text(color="black", size=FontSize),
)
plot = plot + theme(plot.title = element_text(hjust = 0.5))
print(plot)
dev.off()
write.csv(val,paste0(filepath_cluster,'/Data/TGF_BETA.csv'))
## Old way of loading labels from initial EloRD Run
## Should switch to addOldLabels function
####
celltype = 'Mono_DC'
resolution_val_subset = 1.6
cluster_IDs_subset =sampleParam_combine$Cluster_IDs[sampleParam_combine['Sample'] == paste0(sample_type,'_',celltype)]
path = '/home/sujwary/Desktop/scRNA/Output/Harmony/Batch_Sample_Kit/Subcluster/Mono_DC/Cluster/PCA30/res1.6/Data/labels.csv'
folder_subcluster = paste0(folder, 'Subcluster/',celltype,'/')
path = paste0(folder_subcluster,'data_run_PC30','.Robj')
data_run_subset = loadRData(path)
tmp = data_run_subset@meta.data[paste0('RNA_snn_res.', resolution_val_subset)]
tmp = tmp[,1]
tmp  =factor(tmp,levels = as.character(0:(length(unique(tmp))-1)))
Idents(data_run_subset) = tmp
data_run_subset_label =label_cells(data_run_subset,cluster_IDs_subset)
Ident_main = colnames(data_harmony_run_label)
Ident_main = Ident_main[Ident_main %in% colnames(data_run_subset_label)]
Ident_subset = colnames(data_run_subset_label)
Ident_subset_match = match(Ident_subset, Ident_main)
cell_subset = Idents(data_run_subset_label)
newIdents = as.character(Idents(data_harmony_run_label))
newIdents2= newIdents
newIdents2[colnames(data_harmony_run_label) %in% colnames(data_run_subset_label) ] = as.character(cell_subset[Ident_subset_match])
Idents(data_harmony_run_label) = newIdents2
celltype = 'NK_RemoveRiboFeatures'
resolution_val_subset = 3
cluster_IDs_subset =sampleParam_combine$Cluster_IDs[sampleParam_combine['Sample'] == paste0(sample_type,'_',celltype)]
path = '/home/sujwary/Desktop/scRNA/Output/Harmony/Batch_Sample_Kit/Subcluster/NK_RemoveRiboFeatures/Cluster/PCA30/res3/Data/labels.csv'
folder_subcluster = paste0(folder, 'Subcluster/',celltype,'/')
path = paste0(folder_subcluster,'data_run_PC30','.Robj')
data_run_subset = loadRData(path)
tmp = data_run_subset@meta.data[paste0('RNA_snn_res.', resolution_val_subset)]
tmp = tmp[,1]
tmp  =factor(tmp,levels = as.character(0:(length(unique(tmp))-1)))
Idents(data_run_subset) = tmp
data_run_subset_label =label_cells(data_run_subset,cluster_IDs_subset)
Ident_main = colnames(data_harmony_run_label)
Ident_main = Ident_main[Ident_main %in% colnames(data_run_subset_label)]
Ident_subset = colnames(data_run_subset_label)
Ident_subset_match = match(Ident_subset, Ident_main)
cell_subset = Idents(data_run_subset_label)
newIdents = as.character(Idents(data_harmony_run_label))
newIdents2= newIdents
newIdents2[colnames(data_harmony_run_label) %in% colnames(data_run_subset_label) ] = as.character(cell_subset[Ident_subset_match])
Idents(data_harmony_run_label) = newIdents2
celltype = 'T Cell'
resolution_val_subset = 3.5 # main run
PCA_subset = 30
#resolution_val_subset = 4 # main run
#PCA_subset = 40
cluster_IDs_subset =sampleParam_combine$Cluster_IDs[sampleParam_combine['Sample'] == paste0(sample_type,'_',celltype)]
path  = '/home/sujwary/Desktop/scRNA/Output/Harmony/Batch_Sample_Kit/Subcluster/T Cell/Cluster/PCA30/res3.5/Data/labels.csv'
folder_subcluster = paste0(folder, 'Subcluster/',celltype,'/')
path = paste0(folder_subcluster,'data_run_PC',PCA_subset,'.Robj')
data_run_subset = loadRData(path)
tmp = data_run_subset@meta.data[paste0('RNA_snn_res.', resolution_val_subset)]
tmp = tmp[,1]
tmp  =factor(tmp,levels = as.character(0:(length(unique(tmp))-1)))
Idents(data_run_subset) = tmp
data_run_subset_label =label_cells(data_run_subset,cluster_IDs_subset)
Ident_main = colnames(data_harmony_run_label)
Ident_main = Ident_main[Ident_main %in% colnames(data_run_subset_label)]
Ident_subset = colnames(data_run_subset_label)
Ident_subset_match = match(Ident_subset, Ident_main)
cell_subset = Idents(data_run_subset_label)
newIdents = as.character(Idents(data_harmony_run_label))
newIdents2= newIdents
newIdents2[colnames(data_harmony_run_label) %in% colnames(data_run_subset_label) ] = as.character(cell_subset[Ident_subset_match])
Idents(data_harmony_run_label) = newIdents2
plot = DimPlot(data_harmony_run_label,pt.size = 0.7, reduction = "umap",label = TRUE,label.size = 4)
print(plot)
data_input = data_harmony_run_label
gene_list = read.csv('/home/sujwary/Desktop/scRNA/Data/GSEA/KEGG_TGF_BETA_SIGNALING_PATHWAY.txt',header = F)
gene_list = gene_list$V1
gene_list = as.character(gene_list[gene_list %in% rownames(data_input)])
gene_list = list(c(gene_list))
data_input = AddModuleScore(data_input,gene_list, name = 'TGF_BETA')
val = cbind(as.character(Idents(data_input)),as.numeric(data_input$TGF_BETA1))
val = as.data.frame(val)
colnames(val) = c('label','TGF_BETA')
val$TGF_BETA = as.numeric(as.character(val$TGF_BETA))
val$cell = colnames(data_input)
val$sample = data_input$sample
write.csv(val,paste0(filepath_cluster,'/Data/TGF_BETA.csv'))
aggregate(val$TGF_BETA, list(val$label), mean)
print(FeaturePlot(data_input,pt.size = 0.7, features = c("TGF_BETA1")))
FontSize = 12
pathName =  paste0(filepath_cluster,'Plots/BoxPlot/','BoxPlot_TGF_BETA1','.png')
png(file=pathName,width=2400, height=600)
plot = ggplot(val, aes(x = label, y = TGF_BETA ,fill=label)) +
geom_boxplot()+
coord_cartesian(ylim = c(0, 0.6))+
xlab("Cell Type") + ylab(paste0('Interferon Score'))+
theme_classic()
plot = plot + theme(
#plot.title = element_text(hjust = 0.5,color="black", size=24, face="bold.italic"),
axis.title.x = element_text(color="black", size=FontSize ),
axis.title.y = element_text(color="black", size=FontSize),
axis.text= element_text(color="black", size=FontSize),
)
plot = plot + theme(plot.title = element_text(hjust = 0.5))
print(plot)
dev.off()
val
UmapCoord = as.data.frame(data_input@reductions[["umap"]]@cell.embeddings)
output = cbind(val,UmapCoord)
val = cbind(val,UmapCoord)
val
write.csv(val,paste0(filepath_cluster,'/Data/TGF_BETA.csv'))
